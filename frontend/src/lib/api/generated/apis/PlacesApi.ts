/* tslint:disable */
/* eslint-disable */
/**
 * Places API
 * API for managing places and their photos
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@igorski.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedResponse,
  PhotoUploadResponse,
  PlaceRequest,
  PlaceResponse,
} from '../models/index';
import {
    PaginatedResponseFromJSON,
    PaginatedResponseToJSON,
    PhotoUploadResponseFromJSON,
    PhotoUploadResponseToJSON,
    PlaceRequestFromJSON,
    PlaceRequestToJSON,
    PlaceResponseFromJSON,
    PlaceResponseToJSON,
} from '../models/index';

export interface CreatePlaceRequest {
    placeRequest: PlaceRequest;
}

export interface DeletePlaceRequest {
    id: string;
}

export interface GetAllPlacesRequest {
    page?: number;
    size?: number;
}

export interface GetPlaceByIdRequest {
    id: string;
}

export interface UpdatePlaceRequest {
    id: string;
    placeRequest: PlaceRequest;
}

export interface UploadPhotoRequest {
    id: string;
    file: Blob;
}

/**
 * 
 */
export class PlacesApi extends runtime.BaseAPI {

    /**
     * Creates a new place with the provided details
     * Create a new place
     */
    async createPlaceRaw(requestParameters: CreatePlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>> {
        if (requestParameters['placeRequest'] == null) {
            throw new runtime.RequiredError(
                'placeRequest',
                'Required parameter "placeRequest" was null or undefined when calling createPlace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/places`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceRequestToJSON(requestParameters['placeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new place with the provided details
     * Create a new place
     */
    async createPlace(requestParameters: CreatePlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse> {
        const response = await this.createPlaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a place by its ID
     * Delete a place
     */
    async deletePlaceRaw(requestParameters: DeletePlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePlace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/places/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a place by its ID
     * Delete a place
     */
    async deletePlace(requestParameters: DeletePlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePlaceRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a paginated list of all places
     * Get all places
     */
    async getAllPlacesRaw(requestParameters: GetAllPlacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/places`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of all places
     * Get all places
     */
    async getAllPlaces(requestParameters: GetAllPlacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponse> {
        const response = await this.getAllPlacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific place by its ID
     * Get place by ID
     */
    async getPlaceByIdRaw(requestParameters: GetPlaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPlaceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/places/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific place by its ID
     * Get place by ID
     */
    async getPlaceById(requestParameters: GetPlaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse> {
        const response = await this.getPlaceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing place with new details
     * Update a place
     */
    async updatePlaceRaw(requestParameters: UpdatePlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePlace().'
            );
        }

        if (requestParameters['placeRequest'] == null) {
            throw new runtime.RequiredError(
                'placeRequest',
                'Required parameter "placeRequest" was null or undefined when calling updatePlace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/places/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceRequestToJSON(requestParameters['placeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceResponseFromJSON(jsonValue));
    }

    /**
     * Updates an existing place with new details
     * Update a place
     */
    async updatePlace(requestParameters: UpdatePlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse> {
        const response = await this.updatePlaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a photo for a specific place
     * Upload a photo
     */
    async uploadPhotoRaw(requestParameters: UploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhotoUploadResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uploadPhoto().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/places/{id}/photos`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoUploadResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a photo for a specific place
     * Upload a photo
     */
    async uploadPhoto(requestParameters: UploadPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhotoUploadResponse> {
        const response = await this.uploadPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
